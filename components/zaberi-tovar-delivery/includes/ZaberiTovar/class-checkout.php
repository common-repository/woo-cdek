<?php

namespace WBCR\Delivery\ZaberiTovar;

class Checkout extends \WBCR\Delivery\Base\Checkout {
	const AJAX_HANDLER = CheckoutAjax::class;

	const DELIVERY_OBJECT = ZaberiTovar::class;

	const PLUGIN_URL = WDZT_PLUGIN_URL;

	const ORDER_OBJECT = Order::class;

	const PLUGIN_DIR = WDZT_PLUGIN_DIR;

	const USE_TEMPLATE = true;

	const TEMPLATE_FILENAME = 'checkout.php';

	const TEMPLATE_FILENAME_PATH = 'views';

	public $price_field = 'wdzt_price';

	private $selectedDeliveryMethod = [];

	public function __construct() {
		parent::__construct();

		add_action( 'woocommerce_after_checkout_validation', [ $this, 'validate_delivery_method' ], 10, 2 );
//        add_action( 'woocommerce_checkout_order_processed', [ $this, 'save_yandex_delivery_order' ], 9, 2 );
		add_action( 'woocommerce_checkout_order_processed', [ $this, 'order_process' ], 10, 3 );
		add_action( 'woocommerce_checkout_order_processed', [ $this, 'save_delivery_order' ], 9, 2 );
//        add_filter( 'woocommerce_form_field_button', [ $this, 'generate_button_html' ], 10, 4 );
		add_action( 'woocommerce_checkout_after_order_review', [ $this, 'add_after_checkout_form' ], - 10, 1 );

		add_action( 'woocommerce_remove_cart_item', [ $this, 'remove_cart_item' ], 10, 2 );
		add_filter( 'woocommerce_update_cart_action_cart_updated', [
			$this,
			'update_cart_action_cart_updated'
		], 10, 1 );

		static::$app = wdzt_get_current_plugin();
	}

	protected function get_hook_prefix() {
		return 'woocommerce_wbcr_zaberi_tovar_delivery';
	}

	public function enqueue_scripts_checkout() {
		wp_enqueue_script( 'wdzt-app-script', '//api.zaberi-tovar.ru/widget/pvz.js' );
		//wp_enqueue_script( 'wdzt-app-script', '/assets/js/checkout-template.js');
	}

	public function save_data_on_order_review( $post_data ) {
		if ( empty( $post_data['wdzt_data'] ) && empty( $post_data[ $this->price_field ] ) ) {
			return $post_data;
		}

		//$post_data['wdzt_data'] = json_decode( $post_data['wdzt_data'], true );

		return $post_data;
	}

	public function add_after_checkout_form( $checkout ) {
		echo "<div id='ztDeliveryWidget'></div></div>";
	}

	protected function get_plugin_fields() {
		return [
			$this->price_field,
			'wdzt_data',
		];
	}

	public function checkout_fields( $fields ) {
		$fields = parent::checkout_fields( $fields );

		$total = (float) WC()->cart->get_total( 'float' );

		$fields[ ZaberiTovar::SHIPPING_DELIVERY_ID ] = [];

		$fields['billing']['wdzt_info'] = [
			'type'              => 'hidden_wbcr_delivery',
			'default'           => json_encode( [
				'key'  => ZaberiTovar::settings()['widget_api'],
				'cart' => [
					'w'         => WC()->cart->get_cart_contents_weight(),
					'total'     => $total,
					'insurance' => $total * ( (int) ZaberiTovar::settings()['product_declared_price'] ) / 100,
				]
			] ),
			'custom_attributes' => [
				'data-type' => 'info',
			],
		];

		$fields['billing']['wdzt_data'] = [
			'type'              => 'hidden_wbcr_delivery',
			'custom_attributes' => [
				'data-type' => 'zt-data',
			],
		];

		return $fields;
	}

	public function get_total_handler( $amount, $meta ) {
		return parent::get_total_handler( $amount, $meta ); // TODO: Change the autogenerated stub
	}

	/**
	 * @param $fields
	 * @param \WP_Error $errors
	 */
	public function validate_delivery_method( $fields, $errors ) {
//        $data = WC()->session->get( ZaberiTovar::SHIPPING_DELIVERY_ID );
//
//        $delivery_data = json_decode( $data['formData']['wdzt_data'], true );
	}

	public function payment_complete_handler( $order_id ) {
		list( $info, $recipient, $phone, $comment, $delivery_cost, $data ) = $this->get_order_data( $order_id );

		if ( ! $data ) {
			return;
		}

		$this->sendZaberiTovar( $order_id, true, $info, $recipient, $phone, $comment, $delivery_cost, $data );

		$this->clear_session();
	}

	public function save_delivery_order( $orderID, $data ) {
		$items         = WC()->cart->get_cart_contents();
		$data['items'] = $items;

		$data['selectedDeliveryMethod'] = $this->selectedDeliveryMethod;

		update_post_meta( $orderID, Order::DELIVERY_CHECKOUT_META_KEY, $data );
	}

	public function order_process( $order_id, $posted_data, $order ) {
		$shipping_method = $this->get_shipping_method( $posted_data['shipping_method'][0] );
		if ( isset( $shipping_method->id ) && $shipping_method->id !== ZaberiTovar::SHIPPING_DELIVERY_ID ) {
			return;
		}

		$data = json_decode( $posted_data['wdzt_data'], true );
		if ( ! $data ) {
			return;
		}

		$payment_method = $posted_data['payment_method'];

		$payment_when_receipt = $shipping_method->get_instance_option( 'payment_when_receipt', [ 'cod' ] );

		$delivery_cost = $this->calculate_delivery_discount( $data['price'], $posted_data['shipping_method'][0] );

		$payment_upon_receipt = in_array( $payment_method, $payment_when_receipt, false );

		$recipient = sprintf( "%s %s", $posted_data['billing_first_name'], $posted_data['billing_last_name'] );
		$phone     = $posted_data['billing_phone'];
		$comment   = $posted_data['order_comments'];

		$info = json_decode( $posted_data['wdzt_info'], true );
		$this->save_order_data( $order_id, [
			$info,
			$recipient,
			$phone,
			$comment,
			$delivery_cost,
			$data
		] );

		if ( $payment_upon_receipt ) {
			$this->sendZaberiTovar( $order_id, false, $info, $recipient, $phone, $comment, $delivery_cost, $data );
		}

		$this->clear_session();
	}

	/**
	 * @param int $order_id
	 * @param bool $payment_upon_receive
	 * @param $data
	 */
	public function sendZaberiTovar( $order_id, $payment_upon_receive, $info, $recipient, $phone, $comment, $delivery_cost, $data ) {
		if ( $this::$app->is_premium() ) {
			$client = new Client();

			$response = $client->create_pickup_order(
				$order_id,
				$delivery_cost,
				$info['cart']['insurance'],
				$recipient,
				$phone,
				$comment,
				$data['cod'],
				$info['cart']['w']
			);

			if ( strtoupper( $response->params->status ) !== 'OK' ) {
				Helper::log( "Error while creating order", $response );

				return;
			}

			$external_id = (int) $response->params->orders->item->result;
			update_post_meta( $order_id, Order::ORDER_ID_META_KEY, $external_id );
		}
	}

	public function remove_cart_item( $cart_item_key, $_this ) {
		$this->clear_session();
	}

	public function update_cart_action_cart_updated( $cart_updated ) {
		$this->clear_session();

		return $cart_updated;
	}

	/**
	 * Очищает данные из сессии
	 *
	 * Требуется очистка после оформления заказа или обновления корзины.
	 */
	protected function clear_session() {
		$data = WC()->session->get( ZaberiTovar::SHIPPING_DELIVERY_ID );

		if ( isset( $data['formData']['wdzt_data'] ) ) {
			unset( $data['formData']['wdzt_data'] );
			unset( $data['formData']['wdzt_info'] );
		}

		WC()->session->set( ZaberiTovar::SHIPPING_DELIVERY_ID, $data );
	}

}
